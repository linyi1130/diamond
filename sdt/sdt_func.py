from sdt.models import *from django.db import connectionimport datetimefrom django.db.models.aggregates import Maxfrom django.db.models.aggregates import Sumfrom django.contrib.auth.hashers import make_password,check_passwordfrom django.contrib import messagesimport timefrom django.utils.timezone import now, timedeltaimport randomdef user_reg(user_name,wx_name,club_id,t_note ): #注册新用户    try:        ucs_subs_user.objects.filter(inactive_time='2037-01-01').get(user_name=user_name)        return False    except:        try:            t_real_user = real_user(user_name=user_name)            t_real_user.save()  # 生成了USERID            tmp = real_user.objects.filter(user_name=user_name)            t_user_id=tmp.order_by('-active_time')[0].user_id            t_account = real_account(user_id=t_user_id)            t_account.save()  # 生成了account_ID            t_tmp = real_account.objects.filter(user_id=t_user_id)            # 生成了ACCOUNTID            t_account_id = t_tmp.order_by('-active_time')[0].account_id            #t_club_id = ucs_subs_club.objects.get(club_name=club_name).club_id  # 取club_id            t_ucs_subs_user = ucs_subs_user(user_id=t_user_id,                                            account_id=t_account_id,                                            user_name=user_name,                                            wx_name=wx_name,                                            note=t_note                                            )            t_ucs_subs_user.save()  # 保存到usc_subs_user            t_ucs_account = ucs_account(user_id=t_user_id,                                        account_id=t_account_id,                                        club_id=club_id,                                        account_level=1)            t_ucs_account.save()  # account_id 写入            t_club = ucs_club_user(user_id=t_user_id,                                   club_id=club_id)            t_club.save()            return True        except:            return Falsedef checkUserExist(user_name, club_id):    result=0    try:        user_id=ucs_subs_user.objects.filter(inactive_time='2037-01-01').get(user_name=user_name).user_id        tb_result=ucs_club_user.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id).get(user_id=user_id)        result = 1 #俱乐部同名        return result    except Exception as e:        try:            tb_result=ucs_subs_user.objects.filter(inactive_time='2037-01-01').get(user_name=user_name)            result = 2  #联盟同名            return result        except :            return resultdef createUnionAcccount(club_id):    try:        account_id=ucs_union_account.objects.filter(inactive_time='2037-01-01').order_by('active_time')[0].account_id        account_id=account_id+1        t=ucs_union_account(account_id=account_id,                            club_id=club_id)        t.save()        return True    except:        account_id=10000        t=ucs_union_account(account_id=account_id,                            club_id=club_id)        t.save()        return Truedef user_old_reg(user_name, club_id):    try:        user_id=ucs_subs_user.objects.filter(inactive_time='2037-01-01').get(user_name=user_name).user_id        t=ucs_club_user(user_id=user_id,                        club_id=club_id)        t.save()        account_list=ucs_account.objects.filter(inactive_time='2037-01-01').filter(user_id=user_id).order_by('-active_time')[0]        account_id=account_list.account_id        t=ucs_account(account_id=account_id,                      user_id=user_id,                      club_id=club_id,                      account_level=1)        t.save()        return True    except:        return Falsedef SQL_user_list(club_id):    with connection.cursor() as cursor :        strSQL="select b.user_id,b.account_id,b.user_name,b.wx_name,a.club_name,b.note,c.active_time "\        "from sdt_ucs_subs_club  a, sdt_ucs_subs_user  b, sdt_ucs_club_user c "\        "where a.club_id=c.club_id " \        "and c.user_id=b.user_id " \        "and date_format(b.inactive_time,'%%Y')='2037' " \        "and date_format(a.inactive_time,'%%Y')='2037' " \        "and date_format(c.inactive_time,'%%Y')='2037' "\        "and a.club_id=%s " \        "order by b.active_time desc"        cursor.execute(strSQL, club_id)        row = cursor.fetchall()    return rowdef getUserListUnion():    with connection.cursor() as cursor:        strSQL="select b.user_id,b.account_id,b.user_name,b.wx_name,a.club_name,b.note,c.active_time "\        "from sdt_ucs_subs_club  a, sdt_ucs_subs_user  b, sdt_ucs_club_user c "\        "where a.club_id=c.club_id " \        "and c.user_id=b.user_id " \        "and date_format(b.inactive_time,'%Y')='2037' " \        "and date_format(a.inactive_time,'%Y')='2037' " \        "and date_format(c.inactive_time,'%Y')='2037' "\        "order by b.active_time desc"        cursor.execute(strSQL)        tb_result=cursor.fetchall()    return tb_resultdef getUserListByClubId(club_id):    with connection.cursor() as cursor :        strSQL="select b.user_id,b.account_id,b.user_name,b.wx_name,a.club_name,b.note,c.active_time "\        "from sdt_ucs_subs_club  a, sdt_ucs_subs_user  b, sdt_ucs_club_user c "\        "where a.club_id=c.club_id " \        "and c.user_id=b.user_id " \        "and date_format(b.inactive_time,'%%Y')='2037' " \        "and date_format(a.inactive_time,'%%Y')='2037' " \        "and date_format(c.inactive_time,'%%Y')='2037' "\        "and c.club_id=%s "\        "order by c.active_time desc"        cursor.execute(strSQL, club_id)        row = cursor.fetchall()    return rowdef getaccIDwithUserid(user_id):#用userid 获取accountid    try :        account_id = ucs_subs_user.objects.filter(inactive_time='2037-01-01').get(user_id=user_id).account_id    except Exception as e:        return e    return account_iddef getBalancebyaid(account_id):    try :        banlance=ucs_balance.objects.filter(account_id=account_id).order_by('-updatetime')[0].balance    except Exception as e:        return 0    return banlancedef getBalancebyuid(userid):    try :        account_id=ucs_subs_user.objects.filter(user_id=userid).get(inactive_time='2037-01-01').account_id        banlance=ucs_balance.objects.filter(account_id=account_id).order_by('-updatetime')[0].balance    except Exception as e:        return 0    return banlancedef getBalanceList(account_id):    with connection.cursor() as cursor:        strsql="select b.user_id,b.user_name,a.account_id,truncate(a.balance/1000,2) balance, "\        "truncate(a.chance/1000,2) chance,a.chance_desc,a.updatetime "\        "From sdt_ucs_balance a,sdt_ucs_subs_user b "\        "where date_format(a.inactive_time,'%%Y')='2037' "\        "and date_format(b.inactive_time,'%%Y')='2037' "\        "and a.account_id = b.account_id "\        "and a.account_id = %s "\        "order by a.updatetime desc"        cursor.execute(strsql,account_id)        row = cursor.fetchall()    return rowdef getAnteList(blind_id):    with connection.cursor() as cursor:        strSQL="select a.ante from sdt_pm_ante a "\               "where a.blind_id=%s "        cursor.execute(strSQL, blind_id)        ante_list=cursor.fetchall()    return ante_listdef createGameNo(game_type_id, blind_id, ante):    game_type=pm_gametype.objects.get(type_id=game_type_id).type_desc    type_desc=pm_blind.objects.get(blind_id=blind_id).type_desc    day=time.strftime('%Y%m%d', time.localtime())    try:        start = now().date()        end=start+timedelta(days=1)        if ucs_gameno.objects.filter(gametime__range=(start,end)).exists():            cnt=ucs_gameno.objects.filter(gametime__range=(start,end)).order_by('-gametime')[0].cnt            cnt=cnt+1            strcnt=str(cnt).zfill(3)            strante=str(ante).zfill(2)            gameno=str(day)+game_type+str(type_desc)+strante+strcnt            t=ucs_gameno(cnt=cnt,game_no=gameno)            t.save()            return gameno        else:            cnt="001"            strante=str(ante).zfill(2)            gameno=str(day)+game_type+str(type_desc)+strante+cnt            t=ucs_gameno(cnt=cnt,game_no=gameno)            t.save()            return gameno    except Exception as e:        return Falsedef gameRegFunc(gameno, game_type, blind, ante,straddle, playercnt, duration, start_time, status_id,status, operator_id,group_name):    try:        if not ucs_gamerecord.objects.filter(game_no=gameno).exists():            t=ucs_gamerecord(game_no=gameno,                             game_type=game_type,                             blind=blind,                             ante=ante,                             playercnt=playercnt,                             buyin=0,                             duration=duration,                             start_time=start_time,                             status_id=status_id,                             status=status,                             operator_id=operator_id,                             straddle=straddle,                             group_name=group_name)            t.save()            return True    except Exception as e:        return Falsedef getTableList():    with connection.cursor() as cursor:        strSQL="select a.game_no,b.type_name,c.blind_desc, "\               "case when straddle=0 then '否' "\               "else '是' end straddle, "\               "date_format(start_time,'%m/%d %H:%s'),a.duration,a.status,a.group_name from sdt_ucs_gamerecord a, "\               "sdt_pm_gametype b, "\               "sdt_pm_blind c "\               "where a.status_id not in (4,5) "\               "and a.game_type=b.type_id "\               "and a.blind=c.blind_id "\               "and date_format(a.inactive_time, '%Y')='2037' "\               "order by a.start_time desc "        cursor.execute(strSQL)        tb_result=cursor.fetchall()    return tb_resultdef result_preload(strResult,gameno):    tmp_result.objects.filter(game_no=gameno).delete()    p = str(strResult).replace(":", " ")  # 替换：为空格    # 按照空格拆分    list_insert = []    cnt = 8    t = p.split()    listlen = len(t)    while cnt < listlen:        list_insert.append(            tmp_result(user_name=p.split()[cnt], type=p.split()[cnt + 1], score=p.split()[cnt + 2],game_no=gameno))  # 总带入        list_insert.append(            tmp_result(user_name=p.split()[cnt], type=p.split()[cnt + 3], score=p.split()[cnt + 4],game_no=gameno))  # 保险收益        list_insert.append(            tmp_result(user_name=p.split()[cnt], type=p.split()[cnt + 5], score=p.split()[cnt + 6],game_no=gameno))  # 牌局收益        list_insert.append(            tmp_result(user_name=p.split()[cnt], type=p.split()[cnt + 7], score=p.split()[cnt + 8],game_no=gameno))  # 总收入        cnt = cnt + 9    tmp_result.objects.bulk_create(list_insert)    return True#筛选战绩中新玩家def result_regNewUser(gameno):    with connection.cursor() as cursor:        strSQL="select DISTINCT a.user_name from sdt_tmp_result a "\                "where a.game_no=%s "\                "and a.user_name not in "\                "(select b.user_name from sdt_ucs_subs_user b where date_format(b.inactive_time,'%%Y')='2037') "        cursor.execute(strSQL,gameno)        row = cursor.fetchall()        if  len(row)>0 :            return row        else : return Falsedef result_attachclub(gameno):    userlist=[]    with connection.cursor() as cursor:        strSQL="select x.user_id,x.account_id,x.user_name,y.club_id,z.club_name,z.income_rate,z.insure_rate,x.game_no from ( "\               " select a.user_id,a.account_id,a.user_name,b.game_no,count(*) from sdt_ucs_subs_user a, "\               "(select distinct user_name,game_no from sdt_tmp_result) b, "\               "sdt_ucs_club_user c "\               "where a.user_name=b.user_name "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and a.user_id=c.user_id "\               "and b.game_no=%s "\               "and date_format(c.inactive_time,'%%Y')='2037' "\               "group by a.user_id,a.account_id,a.user_name,b.game_no "\               "having count(*)>1) x, "\               "sdt_ucs_club_user y, "\               "sdt_ucs_subs_club z "\               "where x.user_id=y.user_id "\               "and date_format(y.inactive_time,'%%Y')='2037' "\               "and y.club_id=z.club_id "\               "and date_format(z.inactive_time,'%%Y')='2037' "\               "order by user_id asc "        cursor.execute(strSQL,gameno)        row = cursor.fetchall()        if len(row)>0:            sp_club=[]            tmp_id=row[0][0]            tmp_name=row[0][2]            for t in row:                if tmp_name == t[2]:                    sp_club.append((t[3], t[4]))                else:                    userlist.append((tmp_id,tmp_name, sp_club))                    sp_club = []                    tmp_name = t[2]                    tmp_id=t[0]                    sp_club.append((t[3], t[4]))            userlist.append((tmp_id, tmp_name, sp_club))            return userlist        else:            return userlistdef split_club(result_split={}):    tmp_club_user=[]    gameno=result_split.get('gameno')    if len(result_split) > 1:        tmp_result_attachclub_pre.objects.filter(gameno=gameno).delete()        for key in result_split:            if key != "gameno":                tmp_club_user.append(result_split[key])        lenlist=len(tmp_club_user)        i=0        tmp_result_attachclub_pre.objects.filter(gameno=gameno).delete()        while (i < lenlist):            t = tmp_result_attachclub_pre(gameno=gameno,                                    user_id=tmp_club_user[i],                                    user_name=tmp_club_user[i+1],                                    club_id=tmp_club_user[i+2])            t.save()            i=i+3        with connection.cursor() as cursor:            strSQL="insert into sdt_tmp_result_attachclub_pre (gameno,user_id,user_name,club_id) "\                   "select x.game_no,x.user_id,x.user_name,y.club_id from ( "\                   "select  b.game_no,a.user_id,a.user_name,count(*) from sdt_ucs_subs_user a, "\                   "(select distinct user_name,game_no from sdt_tmp_result) b, "\                   "sdt_ucs_club_user c "\                   "where a.user_name=b.user_name "\                   "and b.game_no=%s "\                   "and date_format(a.inactive_time,'%%Y')='2037' "\                   "and a.user_id=c.user_id "\                   "and date_format(c.inactive_time,'%%Y')='2037' "\                   "group by a.user_id,a.account_id,a.user_name,b.game_no "\                   "having count(*)=1) x, "\                   "sdt_ucs_club_user y, "\                   "sdt_ucs_subs_club z "\                   "where x.user_id=y.user_id "\                   "and date_format(y.inactive_time,'%%Y')='2037' "\                   "and y.club_id=z.club_id "\                   "and date_format(z.inactive_time,'%%Y')='2037' "\                   "order by user_id asc"            cursor.execute(strSQL, gameno)            strSQL="commit"            cursor.execute(strSQL)    else:        #没有需要手工分的俱乐部        with connection.cursor() as cursor:            strSQL="insert into sdt_tmp_result_attachclub_pre (gameno, user_id, user_name, club_id) "\                   "select x.game_no,x.user_id,x.user_name,y.club_id from ( "\                   "select  b.game_no,a.user_id,a.user_name,count(*) from sdt_ucs_subs_user a, "\                   "(select distinct user_name,game_no from sdt_tmp_result) b, "\                   "sdt_ucs_club_user c "\                   "where a.user_name=b.user_name "\                   "and game_no=%s "\                   "and date_format(a.inactive_time,'%%Y')='2037' "\                   "and a.user_id=c.user_id "\                   "and date_format(c.inactive_time,'%%Y')='2037' "\                   "group by a.user_id,a.account_id,a.user_name,b.game_no "\                   "having count(*)=1) x, "\                   "sdt_ucs_club_user y, "\                   "sdt_ucs_subs_club z "\                   "where x.user_id=y.user_id "\                   "and date_format(y.inactive_time,'%%Y')='2037' "\                   "and y.club_id=z.club_id "\                   "and date_format(z.inactive_time,'%%Y')='2037' "\                   "order by user_id asc"            cursor.execute(strSQL, gameno)            strSQL="commit"            cursor.execute(strSQL)    return Truedef result_reg(gameno):    tmp_result_step_1.objects.filter(game_no=gameno).delete()    tmp_result_step_2.objects.filter(game_no=gameno).delete()    tmp_result_step_3.objects.filter(game_no=gameno).delete()    #匹配俱乐部信息    with connection.cursor() as cursor:        strsql="insert into sdt_tmp_result_step_1 (user_id,account_id,user_name, club_id, club_name,income_rate,insure_rate,game_no) "\               "select a.user_id,c.account_id,a.user_name,b.club_id,b.club_name,b.income_rate,b.insure_rate,a.gameno "\               "from sdt_tmp_result_attachclub_pre a, "\               "sdt_ucs_subs_club b, "\               "sdt_ucs_account c "\               "where a.club_id=b.club_id "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and a.user_id=c.user_id "\               "and b.club_id=c.club_id "\               "and date_format(c.inactive_time,'%%Y')='2037' "\               "and a.gameno=%s "        cursor.execute(strsql, gameno)        strsql="commit"        cursor.execute(strsql)        strsql="insert into sdt_tmp_result_step_2 (user_id,account_id,club_id,club_name,user_name,type,score,income_rate,income,game_no,score_final) "\            "select b.user_id,b.account_id,b.club_id,b.club_name,b.user_name,a.type,cast(a.score*1000 as signed),"\            "b.income_rate,cast(abs(a.score*b.income_rate/100*0.025)*1000 as signed) income , b.game_no, "\            "case when a.score>0 then a.score*0.95*1000 else a.score*1000 end score_final "\            "from sdt_tmp_result a,sdt_tmp_result_step_1 b "\            "where a.user_name=b.user_name "\            "and a.type=\"总收益\" "\            "and a.game_no=b.game_no "\            "and a.game_no=%s "\			"union all "\            "select b.user_id,b.account_id,b.club_id,b.club_name,b.user_name,a.type,cast(a.score*1000 as signed),"\            "b.income_rate,cast((a.score*b.insure_rate/100*-0.975)*1000 as signed) insure ,b.game_no, " \            "case when a.score>0 then a.score*0.95*1000 else a.score*1000 end score_final " \            "from sdt_tmp_result a,sdt_tmp_result_step_1 b "\            "where a.user_name=b.user_name "\            "and a.type=\"保险收益\"" \            "and a.game_no=b.game_no " \            "and a.game_no=%s"        tmp_gameno=[gameno,gameno]        cursor.execute(strsql,tmp_gameno)        strsql="commit"        cursor.execute(strsql)        strsql="insert into sdt_tmp_result_step_3 (user_id,account_id,user_name,club_id,club_name,score,income_water,waterup,"\			"insure,income_insure,insure_up,income_total,up_total,delivery,game_no,score_final) "\            "select a.user_id,a.account_id, a.user_name,a.club_id,a.club_name,a.score ,a.income income_water, "\            "cast(abs(a.score)*0.025-a.income  as signed) waterup, "\            "b.score insure,b.income income_insure,cast((b.score*-0.975-b.income) as signed) insure_up,a.income+b.income income_total, "\            "cast((abs(a.score)*0.025-a.income+(b.score*-0.975-b.income)) as signed) up_total, "\			"cast((a.score_final+a.income+b.income) as signed) delivery,a.game_no,a.score_final "\            "from (select * from sdt_tmp_result_step_2 where type=\"总收益\") as a, "\            "(select * from sdt_tmp_result_step_2 where type=\"保险收益\") as b "\            "where a.user_id=b.user_id and a.game_no=b.game_no and a.game_no=%s "        cursor.execute(strsql, gameno)        strsql="commit"        cursor.execute(strsql)        strsql="select user_name,club_name,round(income_water/1000,2) income_water, "\            "round(score/1000,2) score,round(waterup/1000,2) waterup,round(insure/1000,2) insure, "\            "round(income_insure/1000,2) income_insure,round(insure_up/1000,2) insure_up, "\            "round(income_total/1000,2) income_total,round(up_total/1000,2) up_total, "\            "round(delivery/1000,2) delivery "\            "from sdt_tmp_result_step_3 a where a.game_no=%s"        cursor.execute(strsql, gameno)        try:            tb_result=cursor.fetchall()        except Exception as e:            return e    return tb_resultdef result_record(gameno, operator_id):    if ucs_result_table_l1.objects.filter(game_no = gameno).exists():        return False    else:        with connection.cursor() as cursor:            # 存战绩玩家表            strSQL = "insert into sdt_ucs_result_table "\                     "(game_no,user_id,account_id,user_name,club_id,club_name,score,score_final, "\                     "income_water,waterup,insure,income_insure,insure_up,income_total,up_total, "\                     "delivery,operator_id,active_time,inactive_time) "\                     "select a.game_no, a.user_id,a.account_id,a.user_name,a.club_id,a.club_name,a.score, a.score_final, "\                     "a.income_water, a.waterup,a.insure,income_insure,a.insure_up, a.income_total,a.up_total, "\                     "a.delivery,%s,now(),'2037-01-01' "\                     "from sdt_tmp_result_step_3 a "\                     "where a.game_no=%s "            tmp_parm = [operator_id, gameno]            cursor.execute(strSQL, tmp_parm)            # 存战绩一级俱乐部表            strSQL="insert into sdt_ucs_result_table_l1(user_id,account_id,user_name,club_id,club_name,score,score_final,income_water, "\                "waterup,insure,income_insure, insure_up,income_total,up_total,delivery,game_no,operator_id,active_time,inactive_time) "\                "select a.user_id,a.account_id,a.user_name,a.club_id,a.club_name,a.score,a.score_final,a.income_water, "\                "a.waterup,a.insure,a.income_insure,a.insure_up,a.income_total,a.up_total,a.delivery,a.game_no,%s,now(),'2037-01-01' "\                "from sdt_tmp_result_step_3 a where a.game_no= %s "            tmp_parm = [operator_id, gameno]            cursor.execute(strSQL, tmp_parm)        return Truedef gamenolist():    gamelist=ucs_result_table_l1.objects.filter(inactive_time='2037-01-01').values("game_no").distinct()    return gamelistdef club_check(club_name):    isexist=True    try:        ucs_subs_club.objects.filter(club_name=club_name).get(inactive_time="2037-01-01")    except :        isexist = False        return isexist    return isexist'''def user_check(user_name):    isexist=True    try:        ucs_subs_user.objects.filter(user_name=user_name).get(inactive_time="2037-01-01")    except :        isexist=False        return isexist    return isexist'''def result_searchByclub(club_id,starttime,endtime):    with connection.cursor() as cursor:        strSQL = "select a.game_no,date_format(a.active_time,'%%c-%%d %%H:%%i') record_time, "\                 "round(sum(a.score_final)/1000,2) score_final, "\                 "count(*) cnt, "\                 "round(sum(a.income_water)/1000,2) income_water, "\                 "round(sum(a.income_insure)/1000,2) income_insure, "\                 "round(sum(a.income_total)/1000,2) income_total, "\                 "round(sum(a.up_total)/1000,2) up_total, "\                 "round(sum(a.delivery)/1000,2) delivery "\                 "from sdt_ucs_result_table_l1 a "\                 "where a.club_id=%s "\                 "and date_format(a.inactive_time,'%%Y')='2037' "\                 "and a.active_time BETWEEN %s and %s "\                 "group by game_no,date_format(a.active_time,'%%c-%%d %%H:%%i')"        tmp_parm = [club_id, starttime, endtime]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()    return  tb_resultdef result_searchByclubSum(club_id,starttime,endtime):    with connection.cursor() as cursor:        strSQL = "select "\                 "round(sum(a.score_final)/1000,2) score_final, "\                 "count(*) cnt, "\                 "round(sum(a.income_water)/1000,2) income_water, "\                 "round(sum(a.income_insure)/1000,2) income_insure, "\                 "round(sum(a.income_total)/1000,2) income_total, "\                 "round(sum(a.up_total)/1000,2) up_total, "\                 "round(sum(a.delivery)/1000,2) delivery "\                 "from sdt_ucs_result_table_l1 a "\                 "where a.club_id=%s " \                 "and a.active_time BETWEEN %s and %s " \                 "and date_format(a.inactive_time,'%%Y')='2037' "        tmp_parm = [club_id, starttime, endtime]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()    return  tb_resultdef result_searchUnionbyclub(starttime,endtime):    with connection.cursor() as cursor:        strSQL = "select a.club_id,a.club_name, "\                "count(distinct a.game_no) game_cnt, "\                "round(sum(a.score_final)/1000,2) score_final, "\                "count(*) player_cnt, "\                "round(sum(a.income_water)/1000,2) income_water, "\                "round(sum(a.income_insure)/1000,2) income_insure, "\                "round(sum(a.income_total)/1000,2) income_total, "\                "round(sum(a.up_total)/1000,2) up_total, "\                "round(sum(a.delivery)/1000,2) delivery "\                "from sdt_ucs_result_table_l1 a " \                "where  date_format(a.active_time,'%%Y-%%m-%%d') BETWEEN %s and %s "\                "and date_format(a.inactive_time,'%%Y')='2037' "\                "group by club_id,club_name" \                " order  by club_id asc"        tmp_parm=[starttime, endtime]        cursor.execute(strSQL, tmp_parm)        tb_result =cursor.fetchall()    return tb_resultdef result_searchUnionbyclubsum(starttime,endtime):    with connection.cursor() as cursor:        strSQL = "select "\                "count(distinct a.game_no) game_cnt, "\                "round(sum(a.score_final)/1000,2) score_final, "\                "count(*) player_cnt, "\                "round(sum(a.income_water)/1000,2) income_water, "\                "round(sum(a.income_insure)/1000,2) income_insure, "\                "round(sum(a.income_total)/1000,2) income_total, "\                "round(sum(a.up_total)/1000,2) up_total, "\                "round(sum(a.delivery)/1000,2) delivery "\                "from sdt_ucs_result_table_l1 a " \                "where  a.active_time BETWEEN %s and %s "\                "and date_format(a.inactive_time,'%%Y')='2037' "        tmp_parm=[starttime, endtime]        cursor.execute(strSQL, tmp_parm)        tb_result =cursor.fetchall()    return tb_resultdef getUserAccountInfo(account_id,club_id):    #获取主和子账户全部名称    with connection.cursor() as cursor:        strSQL="select b.user_name,account_level from "\               "sdt_ucs_account a, "\               "sdt_ucs_subs_user b "\               "where a.account_id=%s "\               "and a.club_id=%s "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and a.user_id=b.user_id "\               "and date_format(b.inactive_time,'%%Y')='2037' "        tmp_parm = [account_id, club_id]        cursor.execute(strSQL, tmp_parm)        tb_result = cursor.fetchall()    account_list=tb_result    try:        account_balance=ucs_balance.objects.filter(inactive_time='2037-01-01').filter(account_id = account_id).filter(club_id =club_id)\            .order_by('-updatetime')[0].balance    except:        account_balance=0    try:        credit_num = ucs_credit_account.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id)\            .get(account_id=account_id).credit_num    except :        credit_num=0    with connection.cursor() as cursor:        strSQL="select sum(a.freeze_num) freeze_num from sdt_ucs_game_freeze_record a "\               "where a.club_id=%s "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and a.account_id=%s "        tmp_parm = [club_id, account_id]        cursor.execute(strSQL, tmp_parm)        tb_result = cursor.fetchall()        if tb_result[0][0] is None:            freeze_num=0        else:freeze_num=tb_result[0][0]    tb_account={}    tb_account['credit_num']=round(credit_num/1000,2)    tb_account['account_balance']=round(account_balance/1000,2)    tb_account['freeze_num']=round(freeze_num/1000,2)    main_account=""    tb_account_list=""    balance_useful=round((credit_num+account_balance-freeze_num)/1000,2)    balance_cashout=round((account_balance-freeze_num)/1000, 2)    for t in account_list:        if t[1]==1:            main_account=t[0]        tb_account_list=tb_account_list+ t[0]+";"    tb_account['main_account']=main_account    tb_account['tb_account_list']=tb_account_list    tb_account['balance_useful']=balance_useful    tb_account['balance_cashout']=balance_cashout    return tb_accountdef getUserBalenceList(account_id,club_id):    with connection.cursor() as cursor:        strSQL="select a.user_id,a.account_id,b.user_name," \               "round(a.chance/1000,2) chance,round(a.balance/1000,2) balance,a.chance_desc," \               "date_format(a.updatetime,'%%m-%%d %%T'), " \               "a.note from sdt_ucs_balance a, "\               "sdt_ucs_subs_user b "\               "where a.user_id=b.user_id "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "\               "and a.account_id=%s "\               "order by a.updatetime desc " \               "limit 10"        tmp_parm = [club_id, account_id]        cursor.execute(strSQL,tmp_parm)        tb_result=cursor.fetchall()    return tb_result#用户存款结账def userCashReg(account_id,user_id,club_id,cashtype,operator_id,change_num,note,serial_no):    balance=0    change_desc=""    try:        user_balance=ucs_balance.objects.filter(inactive_time="2037-01-01").filter(club_id=club_id)\            .filter(account_id=account_id).order_by("-updatetime")[0].balance        if user_balance is None:            balance=0        else:            balance=user_balance    except: balance=0    if cashtype==1001:        balance=balance+change_num        change_desc="客服存款"    elif cashtype==2001:        change_num=-change_num        if balance+change_num>0:            balance=balance+change_num            change_desc="客服结算"        else: return False    t=ucs_balance(account_id=account_id,                  user_id=user_id,                  club_id=club_id,                  balance=balance,                  chance=change_num,                  operator_id=operator_id,                  chance_desc=change_desc,                  serial_no=serial_no,                  note=note                  )    t.save()    return True#增加客服组def add_group(group_name,club_id):    message=False    try:        result=ucs_operator_group.objects.filter(group_name=group_name)\            .filter(inactive_time='2037-01-01').filter(club_id=club_id).exists()        if result:            message=False            return message        else:            t=ucs_operator_group(group_name=group_name,                                 club_id=club_id)            t.save()            #message=True            group_id = ucs_operator_group.objects.filter(inactive_time='2037-01-01').get(group_name=group_name).group_id            return group_id    except Exception as e:        return edef add_operator_func(operator_name, login_id, club_id):    message=False    try:        result=ucs_operator.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id)\            .filter(operator_name=operator_name).exists()        if result:            message = False            return message        else:            try:                result=ucs_operator.objects.aggregate(max_id=Max('operator_id'))                operator_id = result['max_id']                operator_id = operator_id + 1            except Exception as e:                operator_id = '3000'            ps = '123456'            dj_ps = make_password(ps, None, 'pbkdf2_sha256')            t = ucs_operator(operator_id=operator_id, operator_name=operator_name,                             login_id=login_id,club_id=club_id,password=dj_ps)            t.save()            message = True    except Exception as e:        return e    return messagedef operator_relation_list(club_id):    with connection.cursor() as cursor:        strSQL="select b.group_id,b.group_name,a.operator_name From sdt_ucs_operator a, "\               "sdt_ucs_operator_group b "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.group_id=b.group_id "\               "and a.club_id=%s "\               "order by b.group_id asc "        cursor.execute(strSQL,club_id)        tb_result=cursor.fetchall()    return tb_resultdef create_club_accountID(club_id):    try:        result=ucs_club_account.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id).exists()        if result == False:            account_id=6000000+int(club_id)*100+1            return account_id        else:            result=ucs_club_account.objects.filter(club_id=club_id).aggregate(max_id=Max('account_id'))            account_id=result['max_id'] + 1            return account_id    except Exception as e:        return edef create_club_account(account_id, club_id, type_id, group_id):    try:        t=ucs_club_account(account_id=account_id,                         club_id = club_id,                         type_id = type_id,                         group_id = group_id)        t.save()        return True    except :        return Falsedef club_account_group_list(club_id, group_id):    try:        tb_result=ucs_operator_group.objects.filter(club_id=club_id).filter(group_id=group_id)        return tb_result    except Exception as e:        return edef operator_login(login_id, password):    operator_info = {}    try:        tb_op = ucs_operator.objects.filter(inactive_time='2037-01-01').get(login_id=login_id)        if check_password(password,tb_op.password):            operator_info['operator_id']=tb_op.operator_id            operator_info['operator_name']=tb_op.operator_name            operator_info['club_id']=tb_op.club_id            if tb_op.group_id is not None:                operator_info['group_id']=tb_op.group_id            else:                operator_info['group_id'] = 0        else:            return False    except Exception as e:        return False    try:        tb_club = ucs_subs_club.objects.filter(inactive_time='2037-01-01').get(club_id=tb_op.club_id)        operator_info['club_name'] = tb_club.club_name        operator_info['club_lever']=tb_club.club_lever    except Exception as e:        return False    if tb_op.group_id is not None:        try:            group_name = ucs_operator_group.objects.filter(inactive_time='2037-01-01') \                .filter(club_id=tb_op.club_id).get(group_id=tb_op.group_id).group_name            operator_info['group_name'] = group_name        except:            return False    else: operator_info['group_name'] =""    return operator_infodef get_club_account_infoByGroup(club_id,group_id):    tb_result=[]    sum_balance=0    tb_account_list=get_account_type_list(club_id,group_id)    for t in tb_account_list:        try:            balance=ucs_club_balance.objects.filter(inactive_time='2037-01-01').filter(account_id=t[1]).order_by('-update_time')[0].balance            tb_result.append((t[0], round(balance/1000,2)))            sum_balance=sum_balance+round(balance/1000,2)        except Exception as e:            tb_result.append((t[0], 0))    tb_result_2=[]    tb_result_2.append(("账户合计", sum_balance))    tb_result_2.extend(tb_result)    return tb_result_2def get_club_account_SumByGroup(club_id, group_id):    with connection.cursor() as cursor:        strSQL="select truncate(ifnull(sum(b.balance/1000),0),2)  balance_sum from sdt_ucs_club_account a, "\               "sdt_ucs_club_balance b "\               "where a.account_id=b.account_id "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "\               "and a.group_id=%s "        tmp_parm = [club_id, group_id]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()    return tb_result#俱乐部账户存款结账def operator_cash(account_id,chance,chance_type, operator_id, note,serial_no,group_id ):    chance_desc=pm_op_type.objects.get(op_type_id=chance_type).op_type_name    t_balance=0    if chance_type>2000:        chance = -chance    try:        t_balance=ucs_club_balance.objects.filter(inactive_time='2037-01-01')\            .filter(account_id=account_id).order_by('-update_time')[0].balance        if t_balance + chance>0:            t_balance = t_balance+chance        else: return False    except Exception as e:        t_balance = t_balance + chance    try:        t=ucs_club_balance(serial_no=serial_no,                            account_id=account_id,                            chance=chance,                            balance=t_balance,                            chance_type=chance_type,                            chance_desc=chance_desc,                            group_id=group_id,                            operator_id=operator_id,                            note=note)        t.save()    except Exception as e:        return e    return Truedef club_account_list(club_id, group_id):    with connection.cursor() as cursor:        strSQL="select a.account_id, b.type FROM sdt_ucs_club_account a, "\               "sdt_pm_account_type b "\               "where a.type_id=b.type_id "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "\               "and a.group_id=%s "        tmp_parm=[club_id,group_id]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()    return tb_resultdef get_operator_accountID(club_id, group_id, type_id):    try:        account_id=ucs_club_account.objects.filter(inactive_time='2037-01-01')\            .filter(club_id=club_id).get(type_id=type_id).account_id        return account_id    except Exception as e:        return edef get_account_type_list(club_id, group_id):    with connection.cursor() as cursor:        strSQL="select a.type,b.account_id from sdt_pm_account_type a, "\               "sdt_ucs_club_account b "\               "where a.type_id=b.type_id "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037'" \               "and b.club_id=%s "\               "and b.group_id=%s "        tmp_parm = [club_id, group_id]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()    return tb_resultdef get_club_balance_byType(account_id):    try:        type_balance = ucs_club_balance.objects.filter(inactive_time='2037-01-01')\            .filter(account_id=account_id).order_by('-update_time')[0].balance        return type_balance    except Exception as e:        return edef flash(request, title, text , level='info'):    level_map = {        'info': messages.INFO,        'debug': messages.DEBUG,        'success': messages.SUCCESS,        'warning': messages.WARNING,        'error': messages.ERROR    }    level=level_map[level]    messages.add_message(request,level,text,extra_tags=title)    return 'OK'def createSerialNo(club_id, group_id, type_id):    part1=str(datetime.datetime.now().strftime('%m%d%H%M%S'))    #part2=str(datetime.datetime.now().microsecond)    part3=str(club_id)+str(group_id)+str(type_id)    part4=str(random.randint(0,999)).zfill(3)    serialno=part1+part3+part4    return serialnodef getUserInfoByName(user_name,club_id):    tb_result={}    try:        tb_user=ucs_subs_user.objects.filter(inactive_time='2037-01-01').get(user_name=user_name)        wx_name=tb_user.wx_name        note=tb_user.note        account_id=tb_user.account_id        user_id=tb_user.user_id        with connection.cursor() as cursor:            strSQL = "select b.user_name,account_level from " \                     "sdt_ucs_account a, " \                     "sdt_ucs_subs_user b " \                     "where a.account_id=%s " \                     "and a.club_id=%s " \                     "and date_format(a.inactive_time,'%%Y')='2037' " \                     "and a.user_id=b.user_id " \                     "and date_format(b.inactive_time,'%%Y')='2037' "            tmp_parm = [account_id, club_id]            cursor.execute(strSQL, tmp_parm)            tb_tmp = cursor.fetchall()            account_list = tb_tmp #获取本俱乐部同账户玩家信息            tb_account_list=""            for t in account_list:                if t[1] == 1:                    main_account = t[0]                tb_account_list = tb_account_list + t[0] + ";"            tb_result['main_account'] = main_account            tb_result['tb_account_list'] = tb_account_list            strSQL="select b.club_name from sdt_ucs_club_user a, "\                   "sdt_ucs_subs_club b "\                   "where date_format(a.inactive_time,'%%Y')='2037' "\                   "and date_format(b.inactive_time,'%%Y')='2037' "\                   "and a.club_id=b.club_id "\                   "and a.user_id=%s "            cursor.execute(strSQL, user_id)            tb_club= cursor.fetchall()            club_list=""            for t in tb_club:                club_list=club_list + t[0] + ";"            tb_result['club_list']=club_list            tb_result['wx_name']=wx_name            tb_result['note']=note            tb_result['user_id']=user_id            return tb_result    except Exception as e:        return Falsedef modifyUserInfoFunc(user_id, new_name,new_wx_name,new_note):    try:        tmp_user=ucs_subs_user.objects.filter(inactive_time='2037-01-01').get(user_id=user_id)        tmp_customer_id=tmp_user.customer_id        tmp_account_id=tmp_user.account_id        tmp_operator_id=tmp_user.operator_id        tmp_user.inactive_time=datetime.datetime.now()        tmp_user.save()        p=ucs_subs_user(user_id=user_id,                        customer_id=tmp_customer_id,                        account_id=tmp_account_id,                        user_name=new_name,                        wx_name=new_wx_name,                        operator_id=tmp_operator_id,                        note=new_note)        p.save()    except Exception as e:        return False    return Truedef checkUserNameExist(user_name):    try:        ucs_subs_user.objects.filter(inactive_time='2037-01-01').get(user_name=user_name)        return False    except:        return Truedef userAccountMigrate(o_account_id, t_account_id,t_account_name, t_user_id, club_id, operator_id):    #主账户余额表空    t_balance=0    o_balance=0    try:        t_balance_list = ucs_balance.objects.filter(inactive_time='2037-01-01').filter(account_id=t_account_id).filter(            club_id=club_id)        t_balance = t_balance_list.order_by('-updatetime')[0].balance    except :        t_balance=0        try:            ucs_balance.objects.filter(inactive_time='2037-01-01').filter(account_id=t_account_id).filter(                club_id=club_id).update(inactive_time=datetime.datetime.now())            o_balance_list = ucs_balance.objects.filter(inactive_time='2037-01-01').filter(                account_id=o_account_id).filter(club_id=club_id)            o_balance = o_balance_list.order_by('-updatetime')[0].balance        except:            o_balance=0            new_balance = o_balance + t_balance            note = "由" + t_account_name + "账户并入,涉及金额" + str(round(t_balance / 1000, 2))            # 写入主账户余额            t = ucs_balance(account_id=o_account_id,                            user_id=t_user_id,                            club_id=club_id,                            balance=new_balance,                            chance=t_balance,                            chance_desc="账户合并",                            serial_no="9999",                            operator_id=operator_id,                            note=note)            t.save()    #合并账户表    try:        t_account_list=ucs_account.objects.filter(inactive_time='2037-01-01').filter(account_id=t_account_id)        for p in t_account_list:            t=ucs_account(account_id=o_account_id,                          user_id=p.user_id,                          club_id=club_id,                          account_level=2)            t.save()        ucs_account.objects.filter(inactive_time='2037-01-01').filter(account_id=t_account_id).update(inactive_time=datetime.datetime.now())    except Exception as e:        return False    #修改用户表    try:        t_user_list=ucs_subs_user.objects.filter(inactive_time='2037-01-01').filter(account_id=t_account_id)        for p in t_user_list:            t=ucs_subs_user(user_id=p.user_id,                            account_id=o_account_id,                            user_name=p.user_name,                            wx_name=p.wx_name,                            operator_id=operator_id)            t.save()        ucs_subs_user.objects.filter(inactive_time='2037-01-01').filter(account_id=t_account_id).update(inactive_time=datetime.datetime.now())        return True    except Exception as e:        return Falsedef getCLubList():    try:        tb_club_list=ucs_subs_club.objects.filter(inactive_time='2037-01-01').order_by('club_id')        return tb_club_list    except :        return Falsedef getClubListMini():    with connection.cursor() as cursor:        strSQL="select a.club_id,a.club_name from sdt_ucs_subs_club a "\               "where date_format(inactive_time,'%Y')='2037' "\               "order by a.active_time desc "        cursor.execute(strSQL)        tb_result=cursor.fetchall()    return tb_resultdef getClubInfoById(club_id):    try:        tb_result=ucs_subs_club.objects.filter(inactive_time='2037-01-01').get(club_id=club_id)        return tb_result    except Exception as e:        return Falsedef modifyClubInfo(club_id, club_name, club_shortname, club_desc, income_rate, insure_rate):    if club_check(club_name):        tb_club=ucs_subs_club.objects.filter(inactive_time='2037-01-01').get(club_id=club_id)        tb_club.inactive_time=datetime.datetime.now()        tb_club.save()        t=ucs_subs_club(club_id=club_id.strip(),                        club_name=club_name.strip(),                        club_shortname=club_shortname.strip(),                        club_desc=club_desc.strip(),                        income_rate=income_rate.strip(),                        insure_rate=insure_rate.strip(),                        active_time=datetime.datetime.now())        t.save()        return True    else: return Falsedef club_reg(club_name, club_shortname, club_desc, income_rate, insure_rate, subs_club_lever):    try:        club_id=ucs_subs_club.objects.order_by('-club_id')[0].club_id    except :        club_id=1000    new_id=club_id+1    t=ucs_subs_club(club_id=new_id,                    club_name=club_name,                    club_shortname=club_shortname,                    club_desc=club_desc,                    income_rate=income_rate,                    insure_rate=insure_rate,                    club_lever=subs_club_lever)    t.save()    result=add_union_account(new_id)    if result:        return new_id    else:        return Falsedef getFreezeSumByAid(account_id,club_id):    try:        if ucs_game_freeze_record.objects.filter(inactive_time='2037-01-01')\                .filter(club_id=club_id).filter(account_id=account_id).exists():            result=ucs_game_freeze_record.objects.filter(inactive_time='2037-01-01')\                .filter(club_id=club_id).filter(account_id=account_id).aggregate(freeze=Sum('freeze_num'))            freeze_sum=result['freeze']            return freeze_sum        else:            return 0    except Exception as e:        return 0def setFreezeNum(account_id,user_id,freeze_num,club_id,operator_id,game_no,note,unfreeze_time):    try:        t=ucs_game_freeze_record(account_id=account_id,                                 user_id=user_id,                                 club_id=club_id,                                 freeze_num=freeze_num,                                 operator_id=operator_id,                                 active_time=now(),                                 unfreeze_time=unfreeze_time,                                 note=note,                                 game_no=game_no)        t.save()        return True    except Exception as e:        return Falsedef getFreezeListByGameNo(game_no):    with connection.cursor() as cursor:        strSQL="select b.user_name,round(a.freeze_num/1000,2) freeze,a.active_time,a.note  from sdt_ucs_game_freeze_record a, "\               "sdt_ucs_subs_user b, "\               "sdt_ucs_subs_club d "\               "where a.user_id=b.user_id "\               "and a.club_id=d.club_id "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' " \               "and a.game_no=%s " \               "order by a.active_time desc"        cursor.execute(strSQL,game_no)        tb_result=cursor.fetchall()    return tb_resultdef getFreezeListByUid(user_id):    with connection.cursor() as cursor:        strSQL="select a.game_no,round(a.freeze_num/1000,2) num, "\               "a.status, "\               "date_format(a.unfreeze_time,'%%c/%%d %%H:%%i') un_time,a.note "\               "from sdt_ucs_game_freeze_record a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.user_id=%s "        cursor.execute(strSQL, user_id)        tb_result=cursor.fetchall()    return tb_resultdef abortGameByNo(game_no):    try:        ucs_gamerecord.objects.filter(game_no=game_no).update(status_id=4)        ucs_gamerecord.objects.filter(game_no=game_no).update(status = "终止")        ucs_gamerecord.objects.filter(game_no=game_no).update(inactive_time=datetime.datetime.now())        ucs_game_freeze_record.objects.filter(game_no=game_no).update(inactive_time=datetime.datetime.now())        return True    except Exception as e:        return Falsedef getClubListWithoutSelf(club_id):    with connection.cursor() as cursor:        strSQL="SELECT a.club_id,a.club_name FROM sdt_ucs_subs_club a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id<>%s "        cursor.execute(strSQL,club_id)        tb_result=cursor.fetchall()    return tb_resultdef club_cash_func(operator_id,group_id,club_id,cash_num,cash_type,serial_no,note):    try:        op_type=pm_op_type.objects.filter(inactive_time='2037-01-01').get(op_type_id=cash_type).op_type_name    except :        return False    chance_desc=op_type    if cash_type>2000:        cash_num =-cash_num    account_id = ucs_union_account.objects.filter(inactive_time='2037-01-01').get(club_id=club_id).account_id    try:        balance=ucs_union_balance.objects.filter(inactive_time='2037-01-01').filter(account_id=account_id).order_by('-update_time')[0].balance        balance=balance+cash_num    except:        balance=cash_num    t=ucs_union_balance(serial_no=serial_no,                        account_id=account_id,                        balance=balance,                        chance=cash_num,                        chance_type=cash_type,                        chance_desc=chance_desc,                        operator_id=operator_id,                        group_id=group_id,                        note=note)    t.save()    return Truedef getUnionBalanceList(club_id, own_club_id):    with connection.cursor() as cursor:        strSQL="select round(a.chance/1000,2) chance, "\               "round(a.balance/1000,2) balance, "\               "chance_desc, "\               "date_format(a.update_time,'%%c/%%d %%H:%%i') update_time, " \               "group_name,note "\               "from sdt_ucs_union_balance a, "\               "sdt_ucs_operator_group b, "\               "sdt_ucs_union_account c "\               "where a.group_id=b.group_id "\               "and a.account_id=c.account_id "\               "and c.club_id=%s "\               "and b.club_id=%s "\               "order by a.update_time desc "        tmp_parm=[club_id,own_club_id]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()    return tb_resultdef add_union_account(club_id):    try:        account_id=ucs_union_account.objects.all().order_by('-account_id')[0].account_id        account_id=account_id+1        t=ucs_union_account(account_id=account_id,                            club_id=club_id)        t.save()        return True    except Exception as e:        return Falsedef getUnionClubAccountList(club_id):    with connection.cursor() as cursor:        strSQL="select b.club_id,b.club_name,round(c.balance/1000,2) from sdt_ucs_club_relation a, "\               "sdt_ucs_subs_club b, "\               "sdt_ucs_union_account d, " \               "(select  x.account_id,x.balance from (select a.account_id,a.update_time,a.balance from sdt_ucs_union_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037') x, "\               "(select a.account_id,a.update_time from (select a.account_id,a.update_time from sdt_ucs_union_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037') a "\               "left join (select a.account_id,a.update_time from sdt_ucs_union_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037') b "\               "on a.account_id=b.account_id and a.update_time<=b.update_time "\               "group by a.account_id,a.update_time "\               "having count(b.account_id)=1) y "\               "where x.account_id=y.account_id "\               "and x.update_time=y.update_time "\               "order by x.account_id,x.update_time desc) c "\               "where a.subs_club_id=b.club_id "\               "and a.subs_club_id=d.club_id "\               "and d.account_id=c.account_id "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and date_format(d.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "        cursor.execute(strSQL,club_id)        tb_result=cursor.fetchall()    return tb_resultdef gameResultClubReg(game_no, club_id, group_id, operator_id, seriale_no ):    with connection.cursor() as cursor:        strSQL="select y.account_id,x.club_id,x.delivery from( "\               "select a.club_id,sum(a.delivery) delivery  from sdt_ucs_result_table_l1 a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.game_no=%s "\               "group by a.club_id) x, "\               "sdt_ucs_union_account y "\               "where x.club_id=y.club_id "\               "and date_format(y.inactive_time,'%%Y')='2037' "        cursor.execute(strSQL, game_no)        tb_club_sum=cursor.fetchall()    note=game_no    for t in tb_club_sum:        try:            account_id=ucs_union_account.objects.filter(inactive_time='2037-01-01').get(club_id=t[1]).account_id            balance=ucs_union_balance.objects.filter(inactive_time='2037-01-01').filter(account_id=account_id).order_by('-update_time')[0].balance        except :            balance=0        balance=t[2]+balance        try:            p=ucs_union_balance(serial_no=seriale_no,                                account_id=t[0],                                balance=balance,                                chance=t[2],                                chance_type=1003,                                chance_desc='牌局结算',                                operator_id=operator_id,                                group_id=group_id,                                note=note)            p.save()        except:            return False    return Truedef gameResultUserReg(game_no, club_id, operator_id,serial_no):    with connection.cursor() as cursor:        strSQL="select a.user_id,a.account_id,a.club_id,a.score_final from sdt_ucs_result_table a "\               "where date_format(inactive_time,'%%Y')='2037' " \               "and a.game_no=%s"        cursor.execute(strSQL, game_no)        tb_user_list=cursor.fetchall()    for t in tb_user_list:        try:            balance=ucs_balance.objects.filter(inactive_time='2037-01-01').filter(account_id=t[1]) \                .filter(club_id=t[2]).order_by('-active_time')[0].balance        except:            balance=0        balance=balance+t[3]        note=game_no        try:            p=ucs_balance(account_id=t[1],                          user_id=t[0],                          club_id=t[2],                          balance=balance,                          chance=t[3],                          chance_desc='牌局结算',                          serial_no=serial_no,                          operator_id=operator_id,                          note=note)            p.save()        except:            return False    return Truedef getClubBalanceTotal(club_id): #返回俱乐部所有玩家余额    with connection.cursor() as cursor:        strSQL="select sum(x.balance) from (select a.account_id,a.updatetime,a.balance from sdt_ucs_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s) x, "\               "(select a.account_id,a.updatetime from (select a.account_id,a.updatetime from sdt_ucs_balance a  "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s) a "\               "left join (select a.account_id,a.updatetime from sdt_ucs_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s) b "\               "on a.account_id=b.account_id and a.updatetime<=b.updatetime "\               "group by a.account_id,a.updatetime "\               "having count(b.account_id)=1) y "\               "where x.account_id=y.account_id "\               "and x.updatetime=y.updatetime "        tmp_parm = [club_id, club_id, club_id]        cursor.execute(strSQL,tmp_parm)        tb_result=cursor.fetchall()        if tb_result[0][0] is None:            t=0        else:t=tb_result[0][0]        result=round(t/1000,2)    return float(result)def getUnionIncomeTotal(club_id): #上交总收益    with connection.cursor() as cursor:        strSQL="select sum(a.up_total) from sdt_ucs_result_table a, "\               "sdt_ucs_club_relation b "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=b.subs_club_id "\               "and b.club_id=%s "        cursor.execute(strSQL, club_id)        tb_result=cursor.fetchall()    if tb_result[0][0] is None:        t = 0    else:        t = tb_result[0][0]    result = round(t / 1000, 2)    return float(result)def getClubAccountTotal(club_id):  #返回俱乐部现金账户余额    with connection.cursor() as cursor:        strSQL="select  sum(x.balance) from (select a.account_id,a.update_time,a.balance from sdt_ucs_club_balance a , "\               "sdt_ucs_club_account b "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.account_id=b.account_id "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and b.club_id=%s) x, "\               "(select a.account_id,a.update_time from (select a.account_id,a.update_time from sdt_ucs_club_balance a , "\               "sdt_ucs_club_account b "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.account_id=b.account_id "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and b.club_id=%s) a  "\               "left join (select a.account_id,a.update_time from sdt_ucs_club_balance a ,"\               "sdt_ucs_club_account b "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.account_id=b.account_id "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and b.club_id=%s) b "\               "on a.account_id=b.account_id and a.update_time<=b.update_time "\               "group by a.account_id,a.update_time "\               "having count(b.account_id)=1) y " \               "where x.account_id=y.account_id "\               "and x.update_time=y.update_time "        tmp_parm = [club_id, club_id, club_id]        cursor.execute(strSQL,tmp_parm)        tb_result = cursor.fetchall()        if tb_result[0][0] is None:            t = 0        else:            t = tb_result[0][0]        result = round(t / 1000, 2)    return float(result)def getUnionBalanceTotal(club_id): #返回下级俱乐部未结款    with connection.cursor() as cursor:        strSQL="select sum(c.balance) from sdt_ucs_club_relation a, "\               "sdt_ucs_subs_club b, "\               "sdt_ucs_union_account d, "\               "(select  x.account_id,x.balance from (select a.account_id,a.update_time,a.balance from sdt_ucs_union_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037') x, "\               "(select a.account_id,a.update_time from (select a.account_id,a.update_time from sdt_ucs_union_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037') a "\               "left join (select a.account_id,a.update_time from sdt_ucs_union_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037') b "\               "on a.account_id=b.account_id and a.update_time<=b.update_time "\               "group by a.account_id,a.update_time "\               "having count(b.account_id)=1) y "\               "where x.account_id=y.account_id "\               "and x.update_time=y.update_time "\               "order by x.account_id,x.update_time desc) c "\               "where a.subs_club_id=b.club_id "\               "and a.subs_club_id=d.club_id "\               "and d.account_id=c.account_id "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and date_format(d.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "        cursor.execute(strSQL, club_id)        tb_result=cursor.fetchall()        if tb_result[0][0] is None:            t = 0        else:            t = tb_result[0][0]        result = round(t / 1000, 2)    return float(result)def getClubIncomeTotal(club_id): #本俱乐部水钱保险总收益    with connection.cursor() as cursor:        strSQL="select sum(a.income_total) from sdt_ucs_result_table a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "        cursor.execute(strSQL, club_id)        tb_result = cursor.fetchall()        if tb_result[0][0] is None:            t = 0        else:            t = tb_result[0][0]        result = round(t / 1000, 2)    return float(result)def getClubUserBalanceByType(club_id):    result={}    with connection.cursor() as cursor:        strSQL="select sum(x.balance) balance,count(*) cnt from (select a.account_id,a.updatetime,a.balance from sdt_ucs_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s) x, "\               "(select a.account_id,a.updatetime from (select a.account_id,a.updatetime from sdt_ucs_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s) a "\               "left join (select a.account_id,a.updatetime from sdt_ucs_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s) b "\               "on a.account_id=b.account_id and a.updatetime<=b.updatetime "\               "group by a.account_id,a.updatetime "\               "having count(b.account_id)=1) y "\               "where x.account_id=y.account_id "\               "and x.updatetime=y.updatetime " \               "and x.balance>0"        tmp_parm = [club_id, club_id, club_id]        cursor.execute(strSQL,tmp_parm)        tb_result = cursor.fetchall()        for t in tb_result:            result['userplus']=float(round(t[0]/1000,2))            result['userpluscnt']=t[1]        strSQL="select sum(x.balance) balance,count(*) cnt from (select a.account_id,a.updatetime,a.balance from sdt_ucs_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s) x, "\               "(select a.account_id,a.updatetime from (select a.account_id,a.updatetime from sdt_ucs_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s) a "\               "left join (select a.account_id,a.updatetime from sdt_ucs_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s) b "\               "on a.account_id=b.account_id and a.updatetime<=b.updatetime "\               "group by a.account_id,a.updatetime "\               "having count(b.account_id)=1) y "\               "where x.account_id=y.account_id "\               "and x.updatetime=y.updatetime " \               "and x.balance<0"        tmp_parm = [club_id, club_id, club_id]        cursor.execute(strSQL,tmp_parm)        tb_result = cursor.fetchall()        for t in tb_result:            result['userminus']=float(round(t[0]/1000,2))            result['userminuscnt']=t[1]    balance=round((result['userplus']+result['userminus']),2)    result['userbalance']=balance    result['cnt']=result['userpluscnt']+result['userminuscnt']    return resultdef getUnionBalanceByType(club_id):    result={}    with connection.cursor() as cursor:        strSQL="select sum(c.balance) balance,count(*)  cnt from sdt_ucs_club_relation a, "\               "sdt_ucs_subs_club b, "\               "sdt_ucs_union_account d, "\               "(select  x.account_id,x.balance from (select a.account_id,a.update_time,a.balance from sdt_ucs_union_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037') x, "\               "(select a.account_id,a.update_time from (select a.account_id,a.update_time from sdt_ucs_union_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037') a "\               "left join (select a.account_id,a.update_time from sdt_ucs_union_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037') b "\               "on a.account_id=b.account_id and a.update_time<=b.update_time "\               "group by a.account_id,a.update_time "\               "having count(b.account_id)=1) y "\               "where x.account_id=y.account_id "\               "and x.update_time=y.update_time "\               "order by x.account_id,x.update_time desc) c "\               "where a.subs_club_id=b.club_id "\               "and a.subs_club_id=d.club_id "\               "and d.account_id=c.account_id "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and date_format(d.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "\               "and c.balance>0 "        cursor.execute(strSQL,club_id)        tb_result=cursor.fetchall()        for t in tb_result:            result['clubplus']=float(round(t[0]/1000,2))            result['pluscnt']=t[1]        strSQL="select sum(c.balance) balance,count(*)  cnt from sdt_ucs_club_relation a, "\               "sdt_ucs_subs_club b, "\               "sdt_ucs_union_account d, "\               "(select  x.account_id,x.balance from (select a.account_id,a.update_time,a.balance from sdt_ucs_union_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037') x, "\               "(select a.account_id,a.update_time from (select a.account_id,a.update_time from sdt_ucs_union_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037') a "\               "left join (select a.account_id,a.update_time from sdt_ucs_union_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037') b "\               "on a.account_id=b.account_id and a.update_time<=b.update_time "\               "group by a.account_id,a.update_time "\               "having count(b.account_id)=1) y "\               "where x.account_id=y.account_id "\               "and x.update_time=y.update_time "\               "order by x.account_id,x.update_time desc) c "\               "where a.subs_club_id=b.club_id "\               "and a.subs_club_id=d.club_id "\               "and d.account_id=c.account_id "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and date_format(d.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "\               "and c.balance<0 "        cursor.execute(strSQL,club_id)        tb_result=cursor.fetchall()        for t in tb_result:            result['clubminus'] = float(round(t[0] / 1000, 2))            result['minuscnt']=t[1]        balance=round((result['clubminus']+result['clubplus']),2)        result['clubbalance']=balance        result['cnt']=result['minuscnt'] + result['pluscnt']    return resultdef getClubIncomeByType(club_id):    result={}    with connection.cursor() as cursor:        strSQL="select sum(a.income_water) water, "\               "sum(a.income_insure) insure, "\               "sum(a.income_total) total from sdt_ucs_result_table a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "        cursor.execute(strSQL, club_id)        tb_result=cursor.fetchall()        for t in tb_result:            result['water']=float(round(t[0]/1000,2))            result['insure']=float(round(t[1]/1000,2))            result['total']=float(round(t[2]/1000,2))        strSQL="select sum(a.waterup) water, "\               "sum(a.insure_up) insure, "\               "sum(a.up_total) total from sdt_ucs_result_table a , "\               "sdt_ucs_club_relation b "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and a.club_id=b.subs_club_id "\               "and b.club_id=%s "        cursor.execute(strSQL, club_id)        tb_result=cursor.fetchall()        for t in tb_result:            result['up_water']=float(round(t[0]/1000,2))            result['up_insure']=float(round(t[1]/1000,2))            result['up_total']=float(round(t[2]/1000,2))    return resultdef getClubAccountBalanceByType(club_id):    with connection.cursor() as cursor:        strSQL="select tb_type.group_name,tb_type.type,round(ifnull(tb_balance.balance/1000,0),2) balance from ( "\               "select  x.account_id,x.balance from (select a.account_id,a.update_time,a.balance from sdt_ucs_club_balance a , "\               "sdt_ucs_club_account b "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.account_id=b.account_id "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and b.club_id=%s) x, "\               "(select a.account_id,a.update_time from (select a.account_id,a.update_time from sdt_ucs_club_balance a , "\               "sdt_ucs_club_account b "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.account_id=b.account_id "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and b.club_id=%s) a "\               "left join (select a.account_id,a.update_time from sdt_ucs_club_balance a , "\               "sdt_ucs_club_account b "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.account_id=b.account_id "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and b.club_id=%s) b "\               "on a.account_id=b.account_id and a.update_time<=b.update_time "\               "group by a.account_id,a.update_time "\               "having count(b.account_id)=1) y "\               "where x.account_id=y.account_id "\               "and x.update_time=y.update_time) tb_balance right join "\               "(select c.account_id,b.group_id,b.group_name,d.type from sdt_ucs_operator_group b, "\               "sdt_ucs_club_account c, "\               "sdt_pm_account_type d "\               "where date_format(b.inactive_time,'%%Y')='2037' "\               "and date_format(c.inactive_time,'%%Y')='2037' "\               "and date_format(d.inactive_time,'%%Y')='2037' "\               "and b.club_id=c.club_id "\               "and b.group_id=c.group_id "\               "and c.type_id=d.type_id "\               "and b.club_id=%s) tb_type on tb_balance.account_id=tb_type.account_id "        tmp_parm = [club_id, club_id, club_id, club_id]        cursor.execute(strSQL, tmp_parm)        tb_result = cursor.fetchall()    return tb_resultdef getResultDetailByGameno(game_no,club_id):    with connection.cursor() as cursor:        strSQl="select a.user_name,round(a.score/1000,2),round(a.score_final/1000,2)," \               "round(a.income_water/1000,2),round(a.income_insure/1000,2), "\               "round(a.income_total/1000,2),round(a.up_total/1000,2),round(a.delivery/1000,2) "\               "from sdt_ucs_result_table a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "\               "and a.game_no=%s "        tmp_parm = [club_id, game_no]        cursor.execute(strSQl,tmp_parm)        tb_result=cursor.fetchall()        strSQl="select round(sum(a.score)/1000,2) score,round(sum(a.score_final)/1000,2) score_final, "\               "round(sum(a.income_water)/1000,2) income_water,round(sum(a.income_insure)/1000,2) income_insure, "\               "round(sum(a.income_total)/1000,2) income_total,round(sum(a.up_total)/1000,2) up_total, "\               "round(sum(a.delivery)/1000,2) delivery "\               "from sdt_ucs_result_table a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "\               "and a.game_no=%s"        tmp_parm = [club_id, game_no]        cursor.execute(strSQl,tmp_parm)        tb_sum=cursor.fetchall()        result={}        club_name=ucs_subs_club.objects.filter(inactive_time='2037-01-01').get(club_id=club_id).club_name        result['club_name']=club_name        result['game_no']=game_no        result['detail']=tb_result        result['sum']=tb_sum    return resultdef getClubBalanceByGroup(account_id):    with connection.cursor() as cursor:        strSQL="select b.group_name,e.type,a.serial_no,round(a.balance/1000,2),round(a.chance/1000,2)," \               "a.chance_desc,a.update_time,c.operator_name,a.note "\               "from sdt_ucs_club_balance a, "\               "sdt_ucs_operator_group b, "\               "sdt_ucs_operator c, "\               "sdt_ucs_club_account d, "\               "sdt_pm_account_type e "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and date_format(c.inactive_time,'%%Y')='2037' "\               "and date_format(d.inactive_time,'%%Y')='2037' "\               "and date_format(e.inactive_time,'%%Y')='2037' "\               "and a.operator_id=c.operator_id "\               "and a.account_id=d.account_id "\               "and d.type_id=e.type_id "\               "and a.account_id=%s "\               "and b.group_id=c.group_id "\               "order by a.update_time desc "        cursor.execute(strSQL, account_id)        tb_result=cursor.fetchall()    return tb_resultdef getGroupAccountFunc(club_id, group_id):    with connection.cursor() as cursor:        strSQL="select b.account_id,CONCAT(a.group_name,c.type) name from sdt_ucs_operator_group a, "\               "sdt_ucs_club_account b, "\               "sdt_pm_account_type c "\               "where a.club_id=b.club_id "\               "and a.group_id=b.group_id "\               "and b.type_id=c.type_id "\               "and DATE_FORMAT(a.inactive_time,'%%Y')='2037' "\               "and DATE_FORMAT(b.inactive_time,'%%Y')='2037' "\               "and DATE_FORMAT(c.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "\               "and a.group_id=%s "        tmp_parm = [club_id, group_id]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()        result={}        for t in tb_result:            result[t[0]]=t[1]    return resultdef companyCashFunc(club_id,op_account_id, chance, op_type_id, operator_id, serial_no, note):    if op_type_id>2000:        chance_num=-chance    else:        chance_num=chance    try:        balance=ucs_company_balance.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id).order_by('-active_time')[0].balance    except:        balance=0    #写入公司流水表    t=ucs_company_balance(club_id=club_id,                          op_account_id=op_account_id,                          serial_no=serial_no,                          balance=balance+chance_num,                          chance=chance_num,                          op_type_id=op_type_id,                          operator_id=operator_id,                          note=note                          )    t.save()    return Truedef getCompanyBalanceList(club_id):    with connection.cursor() as cursor:        strSQL="SELECT a.serial_no,b.type,round(a.balance/1000,2) balance, round(a.chance/1000,2) chance, " \               "d.name,c.operator_name,a.active_time,a.note " \               "from sdt_ucs_company_balance a, "\               "sdt_pm_comany_type b, "\               "sdt_ucs_operator c, "\               "(select b.account_id,CONCAT(a.group_name,c.type) name from sdt_ucs_operator_group a, "\               "sdt_ucs_club_account b, "\               "sdt_pm_account_type c "\               "where a.club_id=b.club_id "\               "and a.group_id=b.group_id "\               "and b.type_id=c.type_id "\               "and a.club_id=%s " \               "and DATE_FORMAT(a.inactive_time,'%%Y')='2037' "\               "and DATE_FORMAT(b.inactive_time,'%%Y')='2037' "\               "and DATE_FORMAT(c.inactive_time,'%%Y')='2037') d "\               "where DATE_FORMAT(a.inactive_time,'%%Y')='2037' "\               "and DATE_FORMAT(b.inactive_time,'%%Y')='2037' "\               "and DATE_FORMAT(c.inactive_time,'%%Y')='2037' "\               "and a.op_type_id=b.type_id "\               "and a.operator_id=c.operator_id "\               "and a.op_account_id=d.account_id " \               "and a.club_id=%s "\               "order by a.active_time desc "        tmp_parm=[club_id, club_id]        cursor.execute(strSQL,tmp_parm)        tb_result=cursor.fetchall()    return tb_resultdef getCompanyBalanceSum(club_id):    with connection.cursor() as cursor:        strSQL="select round(sum(chance)/1000,2) chance "\               "from sdt_ucs_company_balance a "\               "where DATE_FORMAT(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "\               "and a.op_type_id>2000 "        cursor.execute(strSQL,club_id)        sum_out=cursor.fetchall()        strSQL="select round(sum(chance)/1000,2) chance "\               "from sdt_ucs_company_balance a "\               "where DATE_FORMAT(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "\               "and a.op_type_id>1000 "\               "and a.op_type_id<2000"        cursor.execute(strSQL, club_id)        sum_in = cursor.fetchall()        sum_out=float(sum_out[0][0])        sum_in=float(sum_in[0][0])        total=sum_in+sum_out        result=[sum_out, sum_in, total]    return result